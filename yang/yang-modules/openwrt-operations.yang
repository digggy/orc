module openwrt-operations {
  namespace "urn:jacobs:yang:openwrt-operations";
  prefix "oo";

  import ietf-inet-types {
    prefix inet;
  }

  import openwrt-uci-extension {
    prefix uci;
  }

  contact "username <username@jacobs-university.de>";
    revision 2021-03-20 {
      description "Inital set of operations";
  }

   typedef percent {
           type uint8 {
               range "0 .. 100";
           }
           description "Percentage";
   }

  grouping openwrt-operations-output {
    description
      "Used to return output from RPCs";
    leaf result {
      type string;
      description
        "Output returned by the network element";
    }
  }

  rpc copy {
    description
      "Copy from one file to another";
    
    input {
      leaf _source {
        mandatory true;
        type string;
      }
      leaf _destination {
        mandatory true;
        type string;
      }
    }
    
    output {
      uses openwrt-operations-output;
    }
  }

  rpc delete {
    description
      "Delete a file";
  
    input {
      leaf _filename {
        mandatory true;
        type string;
      }
    }
    
    output {
      uses openwrt-operations-output;
    }
  }

  rpc ping {
    description
        "send ICMP ECHO_REQUEST to network hosts";
    input {
        leaf interval {
            description
                "Wait interval seconds between sending each packet";
            type int64;
            default 1;
        }
        leaf count {
            description
                "Stop after sending count ECHO_REQUEST packets.";
            type int64;
            default 4;
        }
        leaf quiet {
            type boolean;
            default "true";
        }
    }
    output {
        container result {

            container summary {
                leaf packets_transmitted {
                    type int64;
                }
                leaf packets_received {
                    type int64;
                }
                leaf packets_lost {
                    type percent;
                }
                leaf time {
                    type decimal64 {
                         fraction-digits 2;
                    }
                }
            }

            container statistics {
                leaf min {
                    type decimal64 {
                         fraction-digits 2;
                    }
                }
                leaf avg {
                    type decimal64 {
                         fraction-digits 2;
                    }
                }
                leaf max {
                    type decimal64 {
                         fraction-digits 2;
                    }
                }
                leaf mdev {
                    type decimal64 {
                         fraction-digits 2;
                    }
                }
            }

            list icmp_sequences {
              key "id";

              leaf id {
                description "packet id";
                type uint8;
              }

              leaf bytes {
                type uint8;
              }

              leaf target {
                type string;
              }

              leaf target_ip {
                type string;
              }

              leaf icmp_seq {
                type uint8;
              }

              leaf ttl {
                type uint8;
              }

              leaf time_taken {
                type decimal64 {
                    fraction-digits 2;
                }
              }
            }
        }
    }
  }

  rpc mtr {
    output {
    container report {
        container mtr {
            leaf src{
                type string;
            }
            leaf dst{
            // should be a choice between ipv4/6 or string representation
                type string;
            }
            leaf tos{
                type string;
            }
            leaf psize{
                type uint8;
            }
            leaf bitpattern{
                type string;
            }
            leaf tests{
                type uint8;
            }
        }
        list hubs {
            key "count"

            leaf count{
                type uint8;
            }

            leaf host{
                // should be a choice between ipv4/6 or string representation
                type string;
            }

            leaf Loss%{
                type decimal64 {
                    fraction-digits 2;
                }
            }

            leaf Snt{
                type uint8;
            }

            leaf Last{
                type decimal64 {
                    fraction-digits 2;
                }
            }
            leaf Avg{
                type decimal64 {
                    fraction-digits 2;
                }
            }
            leaf Best{
                type decimal64 {
                    fraction-digits 2;
                }
            }
            leaf Wrst{
                type decimal64 {
                    fraction-digits 2;
                }
            }
            leaf StDev{
                type decimal64 {
                    fraction-digits 2;
                }
            }
        }
    }
    }
  }
}