<%! import json %>
#ifndef _YANG_H
#define _YANG_H
#include <stddef.h>
#include <json-c/json.h>
#include <string.h>

struct map_str2str{
  char *key;
  char *str;
};
typedef struct map_str2str map_str2str;

static const map_str2str modulemap[] = {
    % for index, (name, content) in enumerate(modules):
    % if index + 1 == len(modules):
    {"${name}", ${json.dumps(json.dumps(content))}}
    % else:
    {"${name}", ${json.dumps(json.dumps(content))}},
    %endif
    % endfor
};

static const map_str2str yang2regex[] = {
    % for index, (key, value) in enumerate(types.items()):
    % if index + 1 == len(types.items()):
    {"${key}", ${json.dumps(json.dumps(value))}}
    % else:
    {"${key}", ${json.dumps(json.dumps(value))}},
    % endif
    % endfor
};

enum yang_type {
  NONE,
  BINARY,
  BITS,
  BOOLEAN,
  DECIMAL_64,
  EMPTY,
  ENUMERATION,
  IDENTITY_REF,
  INSTANCE_IDENTIFIER,
  INT_8,
  INT_16,
  INT_32,
  INT_64,
  LEAF_REF,
  STRING,
  UINT_8,
  UINT_16,
  UINT_32,
  UINT_64,
  UNION
};
typedef enum yang_type yang_type;

struct map_str2yang_type {
  char* str;
  yang_type type;
};
typedef struct map_str2yang_type map_str2yang_type;

static const map_str2yang_type str2yang_type[] = {
    % for index, (key, value) in enumerate(ALLOWED_TYPES.items()):
    % if index + 1 == len(ALLOWED_TYPES.items()):
    {"${key}", ${value}}
    % else:
    {"${key}", ${value}},
    % endif
    % endfor
};

struct json_object* yang_module_exists(char* module);
yang_type str_to_yang_type(const char* str);
const char* yang_for_type(const char* type);

#endif